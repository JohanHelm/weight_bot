from aiogram.types import CallbackQuery, Message
from pandas.core.frame import DataFrame

from config_data.initial_settings import AppParams


def get_user_names(update: Message | CallbackQuery) -> str:
    return " ".join(filter
                    (bool,
                     (update.from_user.first_name,
                      update.from_user.last_name,
                      update.from_user.username,
                      )
                     )
                    )


def create_hello_msg(update: Message | CallbackQuery) -> str:
    return f"–ü—Ä–∏–≤–µ—Ç {get_user_names(update)}"


help_msg = ("–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–æ–Ω—Ç–æ–ª—è –≤–µ—Å–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞.\n"
            "–î–µ–ª–∞–π—Ç–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –∑–∞–Ω–æ—Å–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã "
            "–≤ –±–æ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ ‚öñÔ∏è –í–ó–í–ï–®–ò–í–ê–ù–ò–ï.\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –≤–Ω–æ—Å–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.\n"
            "–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ —Ç–µ–ª–∞ "
            "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∫–æ–ø–∏—Ç—å –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏.\n"
            "–î–∞–Ω–Ω—ã–µ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤–µ—Å–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ üë£ –¢–†–ï–ö–ï–† –í–ï–°–ê.")


def create_not_enough_data_msg(weighins_count: int) -> str:
    return (f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞.\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –µ—â–µ "
            f"{AppParams.minimal_interval * 2 - weighins_count} –¥–Ω–µ–π.")


def create_track_weight_msg(weight_gain: float) -> str:
    if weight_gain == 0:
        msg = (f"–ö–æ–ª–µ–±–∞–Ω–∏—è –≤–µ—Å–∞ –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞ –Ω–∏–∂–µ {AppParams.threshold_percent}%.\n"
               f"–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞.")
    elif weight_gain < 0:
        msg = f"–ó–∞ –ø—Ä–µ–¥–∏–¥—É—â—É—é –Ω–µ–¥–µ–ª—é –≤—ã –ø–æ—Ö—É–¥–µ–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ {weight_gain} –∫–≥."
    else:
        msg = f"–ó–∞ –ø—Ä–µ–¥–∏–¥—É—â—É—é –Ω–µ–¥–µ–ª—é –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ {weight_gain} –∫–≥."
    return msg


def create_weighing_data_msg():
    return ("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 300.\n"
            "(–ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏.)")


def got_new_weighing_data_msg(weigh_data: float) -> str:
    return (f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è {weigh_data} –∫–≥.\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá –ü–û–î–¢–í–ï–†–î–ò–¢–¨ —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")


def create_confirmed_weighing_msg(weigh_data: float) -> str:
    return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è {weigh_data} –∫–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"


def create_plot_title(two_weeks_df: DataFrame) -> str:
    return (f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π —Å "
            f"{min(two_weeks_df.date.values)} –ø–æ {max(two_weeks_df.date.values)}.")


bad_weighing_data_msg = "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!!!\n"

already_entered_weighing_data = "C–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è"






